(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{363:function(e,a,s){"use strict";s.r(a);var t=s(45),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"ibc-test-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ibc-test-3"}},[e._v("#")]),e._v(" IBC Test 3")]),e._v(" "),s("p",[e._v("In this example, you will be testing the "),s("code",[e._v("ibc")]),e._v(" module using "),s("code",[e._v("chora-chain")]),e._v(" and "),s("code",[e._v("regen-ledger")]),e._v(".")]),e._v(" "),s("p",[e._v("At the moment, "),s("code",[e._v("regen-ledger")]),e._v(" is not set up to be used with "),s("code",[e._v("starport")]),e._v(', which means the setup process will be similar to the previous example ("IBC Test 2").')]),e._v(" "),s("h2",{attrs:{id:"run-chora-chain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-chora-chain"}},[e._v("#")]),e._v(" Run Chora Chain")]),e._v(" "),s("p",[s("em",[e._v("Note: The following commands should be run from within the "),s("code",[e._v("chora-chain")]),e._v(" repository, which is also being used as the "),s("code",[e._v("home")]),e._v(" directory for the purpose of testing (i.e. "),s("code",[e._v("--home .chora")]),e._v(").")])]),e._v(" "),s("p",[e._v("Using the "),s("code",[e._v("chorad")]),e._v(" binary, you will need to initialize the node.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("chorad init chora-node --chain-id chora --home .chora\n")])])]),s("p",[e._v("Once the node has been initialized, you will need to create a validator key and then store the address of the validator for later use.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("KEY_NAME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("chora-validator\n\nchorad keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$KEY_NAME")]),e._v(" --home .chora\n\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("VALIDATOR_ADDRESS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("chorad keys show $KEY_NAME -a --home .chora"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n")])])]),s("p",[e._v("Now that you have generated a validator keypair, you will need to add the public address to the genesis file along with an initial amount of stake.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("chorad add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$VALIDATOR_ADDRESS")]),e._v(" 5000000stake --home .chora\n")])])]),s("p",[e._v("Then you will need to create the genesis transaction.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("chorad gentx "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$KEY_NAME")]),e._v(" 1000000stake --chain-id chora --home .chora\n")])])]),s("p",[e._v("Once you have created the genesis transaction, you will need to write it to the genesis file.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("chorad collect-gentxs --home .chora\n")])])]),s("p",[e._v("Now you are ready to start and run a local node and singleton chain using "),s("code",[e._v("chora-chain")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("chorad start --home .chora\n")])])]),s("h2",{attrs:{id:"run-regen-chain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-regen-chain"}},[e._v("#")]),e._v(" Run Regen Chain")]),e._v(" "),s("p",[s("em",[e._v("Note: The following commands should be run from within the "),s("code",[e._v("chora-chain")]),e._v(" repository, which is also being used as the "),s("code",[e._v("home")]),e._v(" directory for the purpose of testing (i.e. "),s("code",[e._v("--home .regen")]),e._v(").")])]),e._v(" "),s("p",[e._v("Using the "),s("code",[e._v("regen")]),e._v(" binary, you will need to initialize the node.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("regen init regen-node --chain-id regen --home .regen\n")])])]),s("p",[e._v("Once the node has been initialized, you will need to create a validator key and then store the address of the validator for later use.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("KEY_NAME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("regen-validator\n\nregen keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$KEY_NAME")]),e._v(" --home .regen\n\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("VALIDATOR_ADDRESS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("regen keys show $KEY_NAME -a --home .regen"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n")])])]),s("p",[e._v("Now that you have generated a validator keypair, you will need to add the public address to the genesis file along with an initial amount of stake.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("regen add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$VALIDATOR_ADDRESS")]),e._v(" 5000000stake --home .regen\n")])])]),s("p",[e._v("Then you will need to create the genesis transaction.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("regen gentx "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$KEY_NAME")]),e._v(" 1000000stake --chain-id regen --home .regen\n")])])]),s("p",[e._v("Once you have created the genesis transaction, you will need to write it to the genesis file.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("regen collect-gentxs --home .regen\n")])])]),s("p",[e._v("Now you are ready to start and run the node for "),s("code",[e._v("regen-ledger")]),e._v(". For this node, you will need to change the default ports using the appropriate flags.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("regen start --grpc.address "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v(".0.0:9191 --p2p.laddr tcp://127.0.0.1:26658 --rpc.laddr tcp://127.0.0.1:26659 --rpc.pprof_laddr "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:6161 --home .regen\n")])])]),s("h2",{attrs:{id:"run-chain-relayer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-chain-relayer"}},[e._v("#")]),e._v(" Run Chain Relayer")]),e._v(" "),s("p",[s("em",[e._v("Note: The following commands should be run from within the "),s("code",[e._v("chora-chain")]),e._v(" repository, which is also being used as the "),s("code",[e._v("home")]),e._v(" directory for the purpose of testing (i.e. "),s("code",[e._v("--home .relayer")]),e._v(").")])]),e._v(" "),s("p",[e._v("Using the "),s("code",[e._v("rly")]),e._v(" binary, initialize the "),s("code",[e._v("relayer")]),e._v(" service.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("rly config init --home .regen\n")])])]),s("p",[e._v("Add "),s("code",[e._v("chains")]),e._v(" to the "),s("code",[e._v("relayer")]),e._v(" configuration.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("rly config add-chains config/chora-regen/chains --home .regen\n")])])]),s("p",[e._v("Add "),s("code",[e._v("paths")]),e._v(" to the "),s("code",[e._v("relayer")]),e._v(" configuration.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("rly config add-paths config/chora-regen/paths --home .regen\n")])])]),s("p",[e._v("Add keys for each chain for the "),s("code",[e._v("relayer")]),e._v(". "),s("em",[e._v("Note that the same keys used for the validators are being used for the light client operators to simplify the number of steps for testing purposes.")])]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("rly keys restore chora chora-validator "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"[mnemonic]"')]),e._v(" --home .regen\nrly keys restore regen regen-validator "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"[mnemonic]"')]),e._v(" --home .regen\n")])])]),s("p",[e._v("Initialize a light client database for each chain.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("rly light init chora -f --home .regen\nrly light init regen -f --home .regen\n")])])]),s("p",[e._v("Link paths between chains and complete "),s("code",[e._v("relayer")]),e._v(" configuration.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("rly tx "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("link")]),e._v(" transfer --home .regen\n")])])]),s("p",[e._v("Start the "),s("code",[e._v("relayer")]),e._v(" service.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("rly start transfer --home .regen\n")])])]),s("h2",{attrs:{id:"test-transfer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-transfer"}},[e._v("#")]),e._v(" Test Transfer")]),e._v(" "),s("p",[e._v("...")])])}),[],!1,null,null,null);a.default=r.exports}}]);