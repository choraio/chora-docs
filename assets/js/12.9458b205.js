(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{366:function(a,e,s){"use strict";s.r(e);var t=s(45),r=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"ibc-test-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ibc-test-2"}},[a._v("#")]),a._v(" IBC Test 2")]),a._v(" "),s("p",[a._v("In this example, you will be testing the "),s("code",[a._v("ibc")]),a._v(" module using two instances of "),s("code",[a._v("chora-chain")]),a._v(".")]),a._v(" "),s("p",[a._v('This example essentially leads to the same results as the previous example ("IBC Test 1") but it does not use the simplified '),s("code",[a._v("starport")]),a._v(" commands and configuration.")]),a._v(" "),s("h2",{attrs:{id:"run-first-chain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-first-chain"}},[a._v("#")]),a._v(" Run First Chain")]),a._v(" "),s("p",[s("em",[a._v("Note: The following commands should be run from within the "),s("code",[a._v("chora-chain")]),a._v(" repository, which is also being used as the "),s("code",[a._v("home")]),a._v(" directory for the purpose of testing (i.e. "),s("code",[a._v("--home .chora-1")]),a._v(").")])]),a._v(" "),s("p",[a._v("Using the "),s("code",[a._v("chorad")]),a._v(" binary, you will need to initialize the node for the first chain ("),s("code",[a._v("chora-1")]),a._v(").")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("chorad init node-1 --chain-id chora-1 --home .chora-1\n")])])]),s("p",[a._v("Once the node has been initialized, you will need to create a validator key and then store the address of the validator for later use.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("KEY_NAME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("chora-1-validator\n\nchorad keys "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$KEY_NAME")]),a._v(" --home .chora-1\n\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("VALIDATOR_ADDRESS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("chorad keys show $KEY_NAME -a --home .chora-1"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),s("p",[a._v("Now that you have generated a validator key, you will need to add the public address to the genesis file along with an initial amount of stake.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("chorad add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$VALIDATOR_ADDRESS")]),a._v(" 5000000stake --home .chora-1 \n")])])]),s("p",[a._v("Then you will need to create the genesis transaction.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("chorad gentx "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$KEY_NAME")]),a._v(" 1000000stake --chain-id chora-1 --home .chora-1\n")])])]),s("p",[a._v("Once you have created the genesis transaction, you will need to write it to the genesis file.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("chorad collect-gentxs --home .chora-1\n")])])]),s("p",[a._v("Now you are ready to start and run the node for the "),s("code",[a._v("chora-1")]),a._v(" chain.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("chorad start --home .chora-1\n")])])]),s("h2",{attrs:{id:"run-second-chain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-second-chain"}},[a._v("#")]),a._v(" Run Second Chain")]),a._v(" "),s("p",[s("em",[a._v("Note: The following commands should be run from within the "),s("code",[a._v("chora-chain")]),a._v(" repository, which is also being used as the "),s("code",[a._v("home")]),a._v(" directory for the purpose of testing (i.e. "),s("code",[a._v("--home .chora-2")]),a._v(").")])]),a._v(" "),s("p",[a._v("Using the "),s("code",[a._v("chorad")]),a._v(" binary, you will need to initialize the node for the second chain ("),s("code",[a._v("chain-2")]),a._v(").")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("chorad init node-2 --chain-id chora-2 --home .chora-2\n")])])]),s("p",[a._v("Once the node has been initialized, you will need to create a validator key and then store the address of the validator for later use.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("KEY_NAME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("chora-2-validator\n\nchorad keys "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$KEY_NAME")]),a._v(" --home .chora-2\n\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("VALIDATOR_ADDRESS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("chorad keys show $KEY_NAME -a --home .chora-2"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),s("p",[a._v("Now that you have generated a validator key, you will need to add the public address to the genesis file along with an initial amount of stake.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("chorad add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$VALIDATOR_ADDRESS")]),a._v(" 5000000stake --home .chora-2 \n")])])]),s("p",[a._v("Then you will need to create the genesis transaction.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("chorad gentx "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$KEY_NAME")]),a._v(" 1000000stake --chain-id chora-2 --home .chora-2\n")])])]),s("p",[a._v("Once you have created the genesis transaction, you will need to write it to the genesis file.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("chorad collect-gentxs --home .chora-2\n")])])]),s("p",[a._v("Now you are ready to start and run the node for the "),s("code",[a._v("chora-2")]),a._v(" chain. For this node, you will need to change the default ports using the appropriate flags.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("chorad start --grpc.address "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),a._v(".0.0:9191 --p2p.laddr tcp://127.0.0.1:26658 --rpc.laddr tcp://127.0.0.1:26659 --rpc.pprof_laddr "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1:6161 --home .chora-2\n")])])]),s("h2",{attrs:{id:"run-chain-relayer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-chain-relayer"}},[a._v("#")]),a._v(" Run Chain Relayer")]),a._v(" "),s("p",[s("em",[a._v("Note: The following commands should be run from within the "),s("code",[a._v("chora-chain")]),a._v(" repository, which is also being used as the "),s("code",[a._v("home")]),a._v(" directory for the purpose of testing (i.e. "),s("code",[a._v("--home .relayer")]),a._v(").")])]),a._v(" "),s("p",[a._v("Using the "),s("code",[a._v("rly")]),a._v(" binary, initialize the "),s("code",[a._v("relayer")]),a._v(" service.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("rly config init --home .relayer\n")])])]),s("p",[a._v("Add "),s("code",[a._v("chains")]),a._v(" to the "),s("code",[a._v("relayer")]),a._v(" configuration.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("rly config add-chains config/chora-chora/chains --home .relayer\n")])])]),s("p",[a._v("Add "),s("code",[a._v("paths")]),a._v(" to the "),s("code",[a._v("relayer")]),a._v(" configuration.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("rly config add-paths config/chora-chora/paths --home .relayer\n")])])]),s("p",[a._v("Add keys for each chain for the "),s("code",[a._v("relayer")]),a._v(". "),s("em",[a._v("Note that the same keys used for the validators are being used for the light client operators to simplify the number of steps for testing purposes.")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("rly keys restore chora-1 chora-1-validator "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[mnemonic]"')]),a._v(" --home .relayer\nrly keys restore chora-2 chora-2-validator "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[mnemonic]"')]),a._v(" --home .relayer\n")])])]),s("p",[a._v("Initialize a light client database for each chain.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("rly light init chora-1 -f --home .relayer\nrly light init chora-2 -f --home .relayer\n")])])]),s("p",[a._v("Link paths between chains and complete "),s("code",[a._v("relayer")]),a._v(" configuration.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("rly tx "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("link")]),a._v(" transfer --home .relayer\n")])])]),s("p",[a._v("Start the "),s("code",[a._v("relayer")]),a._v(" service.")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("rly start transfer --home .relayer\n")])])]),s("h2",{attrs:{id:"test-transfer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-transfer"}},[a._v("#")]),a._v(" Test Transfer")]),a._v(" "),s("p",[a._v("...")])])}),[],!1,null,null,null);e.default=r.exports}}]);